def final VERSION_CODE = 1
def final VERSION_NAME = '1.0.0'

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {

    defaultConfig {
        applicationId 'tech.hombre.bluetoothchatter'
        minSdkVersion 21
        targetSdkVersion 31
        compileSdkVersion 31
        versionCode VERSION_CODE
        versionName VERSION_NAME
        archivesBaseName = "chatter-$versionName($versionCode)"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        kapt {
            arguments {
                arg('room.schemaLocation', "$projectDir/schemas".toString())
            }
        }
    }

    signingConfigs {
        release {
            def keystorePropertiesFile = rootProject.file('bluetoothchat.properties')
            if (keystorePropertiesFile.exists()) {
                def properties = new Properties()
                keystorePropertiesFile.withReader('UTF-8') { reader ->
                    properties.load(reader)
                }
                storeFile file(properties['keystore'])
                storePassword properties['keystore.password']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            } else {
                null
            }
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.dev'
            versionNameSuffix '-DEV'
            buildConfigField 'boolean', 'AUTORESPONDER', 'false'
        }

        autoresponder {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.ar'
            versionNameSuffix '-AR'
            buildConfigField 'boolean', 'AUTORESPONDER', 'true'
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'AUTORESPONDER', 'false'
        }
    }

    flavorDimensions "store"

    productFlavors {
        google {
            dimension "store"
            versionNameSuffix "-google"
        }
        huawei {
            dimension "store"
            versionNameSuffix "-huawei"
        }
    }

    getSourceSets().each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    sourceSets {
        google.java.srcDirs += 'src/google/kotlin'
        google.res.srcDirs += 'src/google/res'
        huawei.java.srcDirs += 'src/huawei/kotlin'
        huawei.res.srcDirs += 'src/huawei/res'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

if (getGradle().getStartParameter().getTaskNames().toString().toLowerCase().contains("google")) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
} else {
    apply plugin: 'com.huawei.agconnect'
}

dependencies {

    def final ROOM_VERSION = '2.4.2'
    def final LIFECYCLE_VERSION = '2.4.1'
    def final ESPRESSO_VERSION = '3.2.0-beta01'
    def final COROUTINES_VERSION = '1.2.1'
    def final KOIN_VERSION = '2.2.2'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    googleImplementation platform('com.google.firebase:firebase-bom:29.2.0')

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.databinding:databinding-runtime:7.1.2'
    implementation 'androidx.core:core-splashscreen:1.0.0-beta01'

    implementation "androidx.room:room-runtime:$ROOM_VERSION"
    kapt "androidx.room:room-compiler:$ROOM_VERSION"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$LIFECYCLE_VERSION"
    implementation("androidx.lifecycle:lifecycle-process:$LIFECYCLE_VERSION")
    kapt "androidx.lifecycle:lifecycle-common-java8:$LIFECYCLE_VERSION"

    implementation 'com.timehop.stickyheadersrecyclerview:library:0.4.3@aar'
    implementation 'com.github.amulyakhare:TextDrawable:558677ea31'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.github.jkwiecien:EasyImage:3.2.0'

    implementation "io.insert-koin:koin-core:$KOIN_VERSION"
    implementation "io.insert-koin:koin-android:$KOIN_VERSION"

    googleImplementation 'com.google.firebase:firebase-crashlytics-ktx'
    googleImplementation 'com.google.firebase:firebase-analytics-ktx'

    huaweiImplementation 'com.huawei.agconnect:agconnect-core:1.3.1.300'
    huaweiImplementation 'com.huawei.hms:hianalytics:5.0.0.301'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$KOTLIN_VERSION"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$COROUTINES_VERSION"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$COROUTINES_VERSION"

    implementation("androidx.navigation:navigation-fragment-ktx:$NAV_VERSION")
    implementation("androidx.navigation:navigation-ui-ktx:$NAV_VERSION")

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$KOTLIN_VERSION"

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.10"

    testImplementation 'io.mockk:mockk:1.9.3'
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$ESPRESSO_VERSION"
}

task assembleReleaseAndOpen {
    dependsOn 'assembleRelease'
    doLast {
        Runtime.getRuntime().exec("explorer.exe /select," +
                "${buildDir.getAbsolutePath()}\\outputs\\apk\\release\\app-release.apk")
    }
}
